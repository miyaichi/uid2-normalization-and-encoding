service: uid2-normalization-and-encoding
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  region: ${file(./config.yml):region}
  environment:
    region_code: ${file(./config.yml):region_code}
    source_bucket: ${file(./config.yml):source_bucket}
    destination_bucket:  ${file(./config.yml):destination_bucket}
    expires_in: ${file(./config.yml):expires_in}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource:
            - arn:aws:s3:::${self:provider.environment.source_bucket}
            - arn:aws:s3:::${self:provider.environment.destination_bucket}
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            - arn:aws:s3:::${self:provider.environment.source_bucket}/*
            - arn:aws:s3:::${self:provider.environment.destination_bucket}/*
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - "*"

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux

functions:
  eventCreat:
    handler: handler.normalization_and_encoding
    events:
      - s3:
          bucket: ${self:provider.environment.source_bucket}
          event: "s3:ObjectCreated:*"
  eventUpload:
    handler: handler.upload_file_to_s3
    events:
      - http:
          path: eventUpload/upload_file_to_s3
          method: GET
          cors: true
      - http:
          path: eventUpload/upload_file_to_s3
          method: POST
          cors: true
  rateHandler:
    handler: handler.clean_up_buckets
    events:
      - schedule: rate(${file(./config.yml):expires_in} minutes)
